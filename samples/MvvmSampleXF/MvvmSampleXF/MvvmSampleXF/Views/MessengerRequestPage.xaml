<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
			 xmlns:vm="clr-namespace:MvvmSampleUwp.ViewModels;assembly=MvvmSample.Core"
			 xmlns:md="clr-namespace:Xam.Forms.Markdown;assembly=Xam.Forms.MarkdownView"
			 xmlns:controls="clr-namespace:MvvmSampleXF.Controls"
			 x:Class="MvvmSampleXF.Views.MessengerRequestPage"
			 Title="Messenger">
	<ContentPage.BindingContext>
		<vm:MessengerPageViewModel x:Name="ViewModel" />
	</ContentPage.BindingContext>
	<ScrollView Padding="16">
		<StackLayout Padding="16">
			<md:MarkdownView Markdown="{Binding Path=Texts[Sending and receiving messages], Mode=OneWay}" />

			<controls:InteractiveSample ControlTemplate="{StaticResource InteractiveSampleTemplate}"
										HeightRequest="500">
				<StackLayout Spacing="8">

					<Label Text="{Binding Username, Mode=OneWay}" />
					<Button Text="Click to request the username!"
							Command="{Binding RequestCurrentUsernameCommand}" />
					<Button Text="Click to reset the local username!"
							Command="{Binding ResetCurrentUsernameCommand}" />
				</StackLayout>
				<controls:InteractiveSample.XamlCode>
					```xml
&lt;StackPanel Spacing="8">
    &lt;TextBlock Text="{x:Bind ViewModel.Username, Mode=OneWay}"/>
    &lt;Button
        Content="Click to request the username!"
        Click="{x:Bind ViewModel.RequestCurrentUsername}"/>
    &lt;Button
        Content="Click to reset the local username!"
        Click="{x:Bind ViewModel.ResetCurrentUsername}"/>
&lt;/StackPanel>

```
				</controls:InteractiveSample.XamlCode>
				<controls:InteractiveSample.CSharpCode>
					```csharp
// Simple viewmodel for a module responding to a request username message.
// Don't forget to set the IsActive property to true when this viewmodel is in use!
public class UserSenderViewModel : ObservableRecipient
{
    public string Username { get; private set; } = "Bob";

    protected override void OnActivated()
    {
        Messenger.Register&lt;CurrentUsernameRequestMessage>(this, m => m.Reply(Username));
    }
}

private string username;

public string Username
{
    get => username;
    private set => SetProperty(ref username, value);
}

// Sends a message to request the current username, and updates the property
public void RequestCurrentUsername()
{
    Username = Messenger.Default.Send&lt;CurrentUsernameRequestMessage>();
}

// Resets the current username
public void ResetCurrentUsername()
{
    Username = null;
}

// A sample request message to get the current username
public sealed class CurrentUsernameRequestMessage : RequestMessage&lt;string>
{
}
```
				</controls:InteractiveSample.CSharpCode>
			</controls:InteractiveSample>

		</StackLayout>
	</ScrollView>
</ContentPage>